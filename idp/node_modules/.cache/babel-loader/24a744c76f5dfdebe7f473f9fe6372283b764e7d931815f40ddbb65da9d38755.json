{"ast":null,"code":"import { Md5 } from '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport './client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport './client/runtime/s3TransferHandler/xhr.mjs';\nimport { toBase64 } from './client/runtime/base64/index.native.mjs';\nimport '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst calculateContentMd5 = async content => {\n  const hasher = new Md5();\n  const buffer = content instanceof Blob ? await readFile(content) : content;\n  hasher.update(buffer);\n  const digest = await hasher.digest();\n  return toBase64(digest);\n};\nconst readFile = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    resolve(reader.result);\n  };\n  reader.onabort = () => {\n    reject(new Error('Read aborted'));\n  };\n  reader.onerror = () => {\n    reject(reader.error);\n  };\n  reader.readAsArrayBuffer(file);\n});\nexport { calculateContentMd5 };","map":{"version":3,"names":["calculateContentMd5","content","hasher","Md5","buffer","Blob","readFile","update","digest","toBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onabort","Error","onerror","error","readAsArrayBuffer"],"sources":["/app/node_modules/@aws-amplify/storage/src/providers/s3/utils/md5.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Md5 } from '@smithy/md5-js';\nimport { toBase64 } from './client/utils';\nexport const calculateContentMd5 = async (content) => {\n    const hasher = new Md5();\n    const buffer = content instanceof Blob ? await readFile(content) : content;\n    hasher.update(buffer);\n    const digest = await hasher.digest();\n    return toBase64(digest);\n};\nconst readFile = (file) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        resolve(reader.result);\n    };\n    reader.onabort = () => {\n        reject(new Error('Read aborted'));\n    };\n    reader.onerror = () => {\n        reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n});\n"],"mappings":";;;;;;;;AAAA;AACA;AAGY,MAACA,mBAAmB,GAAG,MAAOC,OAAO,IAAK;EAClD,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAE;EACxB,MAAMC,MAAM,GAAGH,OAAO,YAAYI,IAAI,GAAG,MAAMC,QAAQ,CAACL,OAAO,CAAC,GAAGA,OAAO;EAC1EC,MAAM,CAACK,MAAM,CAACH,MAAM,CAAC;EACrB,MAAMI,MAAM,GAAG,MAAMN,MAAM,CAACM,MAAM,EAAE;EACpC,OAAOC,QAAQ,CAACD,MAAM,CAAC;AAC3B;AACA,MAAMF,QAAQ,GAAII,IAAI,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACxD,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;EAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;IAClBJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;EAC9B,CAAK;EACDH,MAAM,CAACI,OAAO,GAAG,MAAM;IACnBL,MAAM,CAAC,IAAIM,KAAK,CAAC,cAAc,CAAC,CAAC;EACzC,CAAK;EACDL,MAAM,CAACM,OAAO,GAAG,MAAM;IACnBP,MAAM,CAACC,MAAM,CAACO,KAAK,CAAC;EAC5B,CAAK;EACDP,MAAM,CAACQ,iBAAiB,CAACZ,IAAI,CAAC;AAClC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}